StudentskaSluzba project[
  url www.StudentskaSluzba.com
  namespace com.StudentskaSluzba
](

  #SERVER
  backend server[
    template java-springboot
    developer (Robert)
    security (principal Student, role UserRole, type username)
  ](

    UserRole enum(STUDENT)

    #####MODELs
    Student model(
      ime text
      prezime text
      indeks text[unique]
      trenutnoStanjeRacuna decimal
      budzet boolean
      tekuciSemestar integer[min 1]
      osvojeniBodovi integer[min 0]
    )

    Predmet model(
      naziv text
      espb integer[min 0]
      obavezni boolean
      predlozeniSemestar integer[min 1]
      imeProfesora text
    )

    Stanje model(
      student Student # from [oneToMany]
      iznos decimal
      opis text
      prethodnoStanje decimal
      datum datetime
    )

    Rok model(
      godina integer
      naziv text
    )

    StudPred model(
      student Student
      predmet Predmet
      ocena optional integer [max 10]
      datumPolozeno optional date
      semestarPrvogSlusanja integer [min 1]
      semestarPoslednjeSlusanja integer [min 1]

      nepolozeniPredmeti find
      from StudPred
      join Predmet on StudPred with StudPred.predmet
      where StudPred.ocena is not null and StudPred.student == user

      prijavljeniPredmeti find
      from StudPred
      join Predmet on StudPred with StudPred.predmet
      where StudPred.student == user

      polozeniPredmeti find
      from StudPred
      join Predmet on StudPred with StudPred.predmet
      where StudPred.student == user

      neslusaniPredmeti find
      from StudPred
      join Predmet on StudPred with StudPred.predmet
      where StudPred.student == user

    )

    Prijava model(
      rok Rok
      studPred StudPred
    )

    #API
    StudentApi api(
      student crud[model Student, rest]

      trenutnoStanje find[
        query Student.findById
        response(
          Student.trenutnoStanjeRacuna
        )
        rest /trenutno-stanje
      ]
    )

    StudPredApi api(
        studPred crud[model StudPred, rest]
        studPreds find[from StudPred, rest]

        nepolozeniPredmeti find[
          query StudPred.nepolozeniPredmeti
          response (
            Predmet.id
            Predmet.naziv
            Predmet.espb
            Predmet.obavezni
            Predmet.predlozeniSemestar
            Predmet.imeProfesora
            StudPred.semestarPrvogSlusanja
          )
          rest /nepolozeni-predmeti
        ]

        prijavljeniPredmeti find[
          query StudPred.prijavljeniPredmeti
          response (
            Predmet.naziv
            Predmet.espb
            Predmet.obavezni
            Predmet.predlozeniSemestar
            Predmet.imeProfesora
            StudPred.semestarPrvogSlusanja
          )
          rest /prijavljeni-predmeti
      ]

        polozeniPredmeti find[
          query StudPred.polozeniPredmeti
          response (
            Predmet.id
            Predmet.naziv
            Predmet.espb
            Predmet.obavezni
            Predmet.imeProfesora
            StudPred.semestarPrvogSlusanja
            StudPred.ocena
            StudPred.datumPolozeno
          )
          rest /polozeni-predmeti
        ]

        neslusaniPredmeti find[
          query StudPred.neslusaniPredmeti
          response (
            Predmet.id
            Predmet.naziv
            Predmet.espb
            Predmet.obavezni
            Predmet.predlozeniSemestar
            Predmet.imeProfesora
            StudPred.semestarPrvogSlusanja
          )
          rest /neslusani-predmeti
        ]

        prijaviPredmet custom[
          request dto(
            userId integer
            predmetId integer
          )
          post /prijavi
        ]

        slusajPredmet custom[
          request dto(
            userId integer
            predmetId integer
          )
          post /slusaj
        ]
    )

    FinansijeApi api(
      finansije crud[model Stanje, rest]

      finansijeStudenta find[
        query Stanje.findByStudent
        rest /finansije-studenta
      ]
    )
  )

  #CLIENT
  webapp client[
    template js-angular
    connectedTo backend
    path /path
    home signInPage
    loggedin MainLayout
  ](
    MainLayout page(
      naslovna button{ on click goto naslovnaPage(principal.id) }
      predmeti button{ on click goto PredmetiPage(principal.id) }
      finansije button{ on click goto finansijePage(principal.id) }
      placeholder
    )

    studentChangedEvent event

    naslovnaPage MainLayout[path /home, params(userId integer)](
      UpdateTaskGroupForm form[bind params.userId, load StudentApi.readStudent, submit StudentApi.updateStudent]{
        on success goto naslovnaPage(success.id)
      }
    )

    PredmetiPage MainLayout[path /predmeti, params(userId integer)](
        nepolozeni button{ on click goto nepolozeniPage(params.userId) }
        polozeni button{ on click goto polozeniPage(params.userId) }
        neslusani button{ on click goto neslusaniPage(params.userId) }
        placeholder
    )

    predmetChangedEvent event

    nepolozeniPage PredmetiPage[path /nepolozeni, params(userId integer)](
      nepolozeni table[bind params.userId, load StudPredApi.nepolozeniPredmeti](
        prijavi button{
          on click call StudPredApi.prijaviPredmet(params.userId, item.predmetId){
            on success fire predmetChangedEvent
          }
        }
      ){
        on predmetChangedEvent reload
      }
      prijavljeni table[bind params.userId, load StudPredApi.prijavljeniPredmeti]{
        on predmetChangedEvent reload
      }
    )

    polozeniPage PredmetiPage[path /polozeni, params(userId integer)](
      polozeni table[bind params.userId, load StudPredApi.polozeniPredmeti]{
        on predmetChangedEvent reload
      }
    )

    neslusaniPage PredmetiPage[path /neslusani, params(userId integer)](
      neslusani table[bind params.userId, load StudPredApi.neslusaniPredmeti](
        slusaj button{
          on click call StudPredApi.slusajPredmet(params.userId, item.predmetId){
            on success fire predmetChangedEvent
          }
        }
      ){
        on predmetChangedEvent reload
      }
    )

    finansijePage MainLayout[path /finansije, params(userId integer)](
      trenutnoStanje form[bind params.userId, model (stanje integer), load StudentApi.trenutnoStanje]{
        on predmetChangedEvent reload
      }
      finanasijeTable table[bind params.userId, load FinansijeApi.finansijeStudenta]{
        on predmetChangedEvent reload
      }
    )
  )
)
