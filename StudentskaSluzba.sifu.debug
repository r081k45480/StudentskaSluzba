StudentskaSluzba project[
    url www.StudentskaSluzba.com
    namespace com.StudentskaSluzba](
    backend server[
        template java-springboot
        developer(
            Robert
            docker
        )
        security(
            principal User
            type(
                username
            )
            signIn[
                query findById
                response(
                    User.id
                    User.username
                )]
        )
        path /
        default model type mysql](
        User model[
            type mysql
            unique(
                username
            )](
            id integer[
                primarykey
                max 9223372036854775807]
            username text[
                unique
                min 3
                max 128]
            passwordHash text[
                min 6
                max 128
                sensitive]
            findAll find from User as User
            countAll count from User as User
            findById find from User as User where User.id == id
            getById get from User as User where User.id == id
            deleteById delete from User as User where User.id == id
            findByUsername find from User as User where User.username == username
            findByPasswordHash find from User as User where User.passwordHash == passwordHash
        )
        Predmet model[
            type mysql](
            id integer[
                primarykey
                max 9223372036854775807]
            naziv text[
                max 255]
            espb integer[
                min 0]
            obavezni boolean
            predlozeniSemestar integer[
                min 1]
            imeProfesora text[
                max 255]
            findAll find from Predmet as Predmet
            countAll count from Predmet as Predmet
            findById find from Predmet as Predmet where Predmet.id == id
            getById get from Predmet as Predmet where Predmet.id == id
            deleteById delete from Predmet as Predmet where Predmet.id == id
            findByNaziv find from Predmet as Predmet where Predmet.naziv == naziv
            findByEspb find from Predmet as Predmet where Predmet.espb == espb
            findByObavezni find from Predmet as Predmet where Predmet.obavezni == obavezni
            findByPredlozeniSemestar find from Predmet as Predmet where Predmet.predlozeniSemestar == predlozeniSemestar
            findByImeProfesora find from Predmet as Predmet where Predmet.imeProfesora == imeProfesora
        )
        Stanje model[
            type mysql](
            id integer[
                primarykey
                max 9223372036854775807]
            iznos decimal[
                precision 10
                scale 4]
            datum datetime
            findAll find from Stanje as Stanje
            countAll count from Stanje as Stanje
            findById find from Stanje as Stanje where Stanje.id == id
            getById get from Stanje as Stanje where Stanje.id == id
            deleteById delete from Stanje as Stanje where Stanje.id == id
            findByIznos find from Stanje as Stanje where Stanje.iznos == iznos
            findByDatum find from Stanje as Stanje where Stanje.datum == datum
        )
        Rok model[
            type mysql](
            id integer[
                primarykey
                max 9223372036854775807]
            godina integer
            naziv text[
                max 255]
            findAll find from Rok as Rok
            countAll count from Rok as Rok
            findById find from Rok as Rok where Rok.id == id
            getById get from Rok as Rok where Rok.id == id
            deleteById delete from Rok as Rok where Rok.id == id
            findByGodina find from Rok as Rok where Rok.godina == godina
            findByNaziv find from Rok as Rok where Rok.naziv == naziv
        )
        StudPred model[
            type mysql](
            id integer[
                primarykey
                max 9223372036854775807]
            student User[
                manyToOne studPred]
            predmet Predmet[
                manyToOne studPred]
            findAll find from StudPred as StudPred
            countAll count from StudPred as StudPred
            findById find from StudPred as StudPred where StudPred.id == id
            getById get from StudPred as StudPred where StudPred.id == id
            deleteById delete from StudPred as StudPred where StudPred.id == id
            findByStudent find from StudPred as StudPred where StudPred.student.id == studentId
            findByPredmet find from StudPred as StudPred where StudPred.predmet.id == predmetId
            studPreds find from StudPred as StudPred
        )
        Prijava model[
            type mysql](
            id integer[
                primarykey
                max 9223372036854775807]
            rok Rok[
                manyToOne prijava]
            studPred StudPred[
                manyToOne prijava]
            findAll find from Prijava as Prijava
            countAll count from Prijava as Prijava
            findById find from Prijava as Prijava where Prijava.id == id
            getById get from Prijava as Prijava where Prijava.id == id
            deleteById delete from Prijava as Prijava where Prijava.id == id
            findByRok find from Prijava as Prijava where Prijava.rok.id == rokId
            findByStudPred find from Prijava as Prijava where Prijava.studPred.id == studPredId
        )
        StudentApi api(
            readStudent find[
                get /student/:id
                model User
                query User.findById
                response(
                    User.id
                    User.username
                    User.passwordHash
                )
                errors
                request ReadStudentRequest
                response ReadStudentResponse]
            ReadStudentRequest dto(
                id integer[
                    max 9223372036854775807]
            )
            ReadStudentResponse dto[
                model User](
                id integer[
                    max 9223372036854775807]
                username text[
                    min 3
                    max 128]
                passwordHash text[
                    min 6
                    max 128
                    sensitive]
            )
            createStudent create[
                post /student
                model User
                query User.findById
                response(
                    User.id
                    User.username
                    User.passwordHash
                )
                errors
                request CreateStudentRequest
                response CreateStudentResponse](
                id id[
                    visible(
                        read
                    )]
                username username[
                    visible(
                        create
                        read
                    )]
                passwordHash passwordHash[
                    visible(
                        create
                        read
                    )]
            )
            CreateStudentRequest dto[
                model User](
                username text[
                    min 3
                    max 128]
                passwordHash text[
                    min 6
                    max 128
                    sensitive]
            )
            CreateStudentResponse dto[
                model User](
                id integer[
                    max 9223372036854775807]
                username text[
                    min 3
                    max 128]
                passwordHash text[
                    min 6
                    max 128
                    sensitive]
            )
            updateStudent update[
                put /student/:id
                model User
                query User.findById
                response(
                    User.id
                    User.username
                    User.passwordHash
                )
                errors
                request UpdateStudentRequest
                response UpdateStudentResponse](
                id id[
                    visible(
                        read
                        update
                    )]
                username username[
                    visible(
                        read
                        update
                    )]
                passwordHash passwordHash[
                    visible(
                        read
                        update
                    )]
            )
            UpdateStudentRequest dto[
                model User](
                id integer[
                    max 9223372036854775807]
                username text[
                    min 3
                    max 128]
                passwordHash text[
                    min 6
                    max 128
                    sensitive]
            )
            UpdateStudentResponse dto[
                model User](
                id integer[
                    max 9223372036854775807]
                username text[
                    min 3
                    max 128]
                passwordHash text[
                    min 6
                    max 128
                    sensitive]
            )
            deleteStudent delete[
                delete /student/:id
                query User.findById
                errors
                request DeleteStudentRequest]
            DeleteStudentRequest dto(
                id integer[
                    max 9223372036854775807]
            )
        )
        StudPredApi api(
            readStudPred find[
                get /stud-pred/:id
                model StudPred
                query StudPred.findById
                response(
                    StudPred.id
                    StudPred.student.id
                    StudPred.predmet.id
                )
                errors
                request ReadStudPredRequest
                response ReadStudPredResponse]
            ReadStudPredRequest dto(
                id integer[
                    max 9223372036854775807]
            )
            ReadStudPredResponse dto[
                model StudPred](
                id integer[
                    max 9223372036854775807]
                studentId integer[
                    max 9223372036854775807]
                predmetId integer[
                    max 9223372036854775807]
            )
            createStudPred create[
                post /stud-pred
                model StudPred
                query StudPred.findById
                response(
                    StudPred.id
                    StudPred.student.id
                    StudPred.predmet.id
                )
                errors
                request CreateStudPredRequest
                response CreateStudPredResponse](
                id id[
                    visible(
                        read
                    )]
                studentId student.id[
                    visible(
                        create
                        read
                    )]
                predmetId predmet.id[
                    visible(
                        create
                        read
                    )]
            )
            CreateStudPredRequest dto[
                model StudPred](
                studentId integer[
                    max 9223372036854775807]
                predmetId integer[
                    max 9223372036854775807]
            )
            CreateStudPredResponse dto[
                model StudPred](
                id integer[
                    max 9223372036854775807]
                studentId integer[
                    max 9223372036854775807]
                predmetId integer[
                    max 9223372036854775807]
            )
            updateStudPred update[
                put /stud-pred/:id
                model StudPred
                query StudPred.findById
                response(
                    StudPred.id
                    StudPred.student.id
                    StudPred.predmet.id
                )
                errors
                request UpdateStudPredRequest
                response UpdateStudPredResponse](
                id id[
                    visible(
                        read
                        update
                    )]
                studentId student.id[
                    visible(
                        read
                        update
                    )]
                predmetId predmet.id[
                    visible(
                        read
                        update
                    )]
            )
            UpdateStudPredRequest dto[
                model StudPred](
                id integer[
                    max 9223372036854775807]
                studentId integer[
                    max 9223372036854775807]
                predmetId integer[
                    max 9223372036854775807]
            )
            UpdateStudPredResponse dto[
                model StudPred](
                id integer[
                    max 9223372036854775807]
                studentId integer[
                    max 9223372036854775807]
                predmetId integer[
                    max 9223372036854775807]
            )
            deleteStudPred delete[
                delete /stud-pred/:id
                query StudPred.findById
                errors
                request DeleteStudPredRequest]
            DeleteStudPredRequest dto(
                id integer[
                    max 9223372036854775807]
            )
            studPreds find[
                query StudPred.studPreds
                get /stud-preds
                errors
                response(
                    StudPred.id
                    StudPred.student.id
                    StudPred.predmet.id
                )
                response list StudPredsResponse]
            StudPredsResponse dto[
                model StudPred](
                id integer[
                    max 9223372036854775807]
                studentId integer[
                    max 9223372036854775807]
                predmetId integer[
                    max 9223372036854775807]
            )
        )
        CREDENTIALS_ARE_INVALID unauthorized
        ACCESS_TOKEN_IS_EXPIRED unauthorized
        USER_ALREADY_EXIST dataConstraint
        accessTokenValidityInSeconds integer[
            key accessTokenValidityInSeconds
            production 300
            test 300]
        refreshTokenValidityInSeconds integer[
            key refreshTokenValidityInSeconds
            production 3600
            test 3600]
        AuthenticationApi api(
            refreshToken refreshtoken[
                request RefreshTokenRequest
                post /refresh-token
                query User.findById
                response(
                    User.id
                    User.username
                )
                errors
                response RefreshTokenResponse]
            RefreshTokenRequest dto(
                refreshToken text[
                    sensitive
                    max 255]
            )
            RefreshTokenResponse dto[
                model User](
                accessToken text[
                    min 64
                    max 64
                    sensitive]
                refreshToken text[
                    min 64
                    max 64
                    sensitive]
                id integer[
                    max 9223372036854775807]
                username text[
                    min 3
                    max 128]
            )
            signUp signup[
                post /sign-up
                query User.findById
                response(
                    User.id
                    User.username
                )
                errors
                request SignUpRequest
                response SignUpResponse](
                username username
                password text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
            )
            SignUpRequest dto(
                username text[
                    min 3
                    max 128]
                password text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
            )
            SignUpResponse dto[
                model User](
                id integer[
                    max 9223372036854775807]
                username text[
                    min 3
                    max 128]
            )
            signIn signIn[
                request SignInRequest
                post /sign-in
                query User.findById
                response(
                    User.id
                    User.username
                )
                errors
                response SignInResponse]
            SignInRequest dto(
                username text[
                    min 3
                    max 128]
                password text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
            )
            SignInResponse dto[
                model User](
                accessToken text[
                    min 64
                    max 64
                    sensitive]
                refreshToken text[
                    min 64
                    max 64
                    sensitive]
                id integer[
                    max 9223372036854775807]
                username text[
                    min 3
                    max 128]
            )
            changePassword changepassword[
                request ChangePasswordRequest
                secured
                post /change-password
                query User.findById
                response(
                    User.id
                    User.username
                )
                errors
                response ChangePasswordResponse]
            ChangePasswordRequest dto(
                oldPassword text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
                newPassword text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
            )
            ChangePasswordResponse dto[
                model User](
                id integer[
                    max 9223372036854775807]
                username text[
                    min 3
                    max 128]
            )
        )
    )
    webapp client[
        template js-angular
        connectedTo(
            backend.StudentApi.readStudent
            backend.StudentApi.createStudent
            backend.StudentApi.updateStudent
            backend.StudentApi.deleteStudent
            backend.StudPredApi.readStudPred
            backend.StudPredApi.createStudPred
            backend.StudPredApi.updateStudPred
            backend.StudPredApi.deleteStudPred
            backend.StudPredApi.studPreds
            backend.AuthenticationApi.refreshToken
            backend.AuthenticationApi.signUp
            backend.AuthenticationApi.signIn
            backend.AuthenticationApi.changePassword
        )
        path /path
        home(
            notesPage
        )
        i18n(
            en
        )](
        NoteUpdated event
        notesPage page[
            path /notes](
            studePreds studePreds
            addNote button{
                on click(
                    open createNewNote
                )}
        )
        createNewNote form[
            submit StudPredApi.createStudPred
            model(
                studentId integer[
                    max 9223372036854775807]
                predmetId integer[
                    max 9223372036854775807]
            )
            visible(
                studentId
                predmetId
            )](
            studentId integer[
                input(
                    model . studentId
                )
                max 9223372036854775807]
            predmetId integer[
                input(
                    model . predmetId
                )
                max 9223372036854775807]
            submit button{
                on click(
                    call backend.StudPredApi.createStudPred(
                        model . studentId
                        model . predmetId
                    ){
                        on success(
                            close
                            fire NoteUpdated
                        )}
                )}
        )
        signInPage page[
            path /sign-in](
            signInForm signInForm
            signUp link{
                on click(
                    goto signUpPage
                )}
        )
        signUpPage page[
            path /sign-up](
            signUpForm signUpForm
            signIn link{
                on click(
                    goto signInPage
                )}
        )
        changePasswordForm form[
            submit backend.AuthenticationApi.changePassword
            model(
                oldPassword text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
                newPassword text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
            )
            visible(
                oldPassword
                newPassword
            )](
            oldPassword text[
                input(
                    model . oldPassword
                )
                min 6
                max 32
                regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                sensitive]
            newPassword text[
                input(
                    model . newPassword
                )
                min 6
                max 32
                regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                sensitive]
            submit button{
                on click(
                    call backend.AuthenticationApi.changePassword(
                        model . oldPassword
                        model . newPassword
                    ){
                        on success(
                            goto signInPage
                        )}
                )}
        )
        studePreds table[
            load StudPredApi.studPreds
            model(
                id integer[
                    max 9223372036854775807]
                studentId integer[
                    max 9223372036854775807]
                predmetId integer[
                    max 9223372036854775807]
            )
            visible(
                id
                studentId
                predmetId
            )](
            id integer[
                input(
                    model . id
                )
                max 9223372036854775807]
            studentId integer[
                input(
                    model . studentId
                )
                max 9223372036854775807]
            predmetId integer[
                input(
                    model . predmetId
                )
                max 9223372036854775807]
        ){
            on NoteUpdated(
                call backend.StudPredApi.studPreds{
                    on success(
                        (
                            model.id = success.id
                            model.studentId = success.studentId
                            model.predmetId = success.predmetId
                        )
                    )}
            )
            on init(
                call backend.StudPredApi.studPreds{
                    on success(
                        (
                            model.id = success.id
                            model.studentId = success.studentId
                            model.predmetId = success.predmetId
                        )
                    )}
            )}
        signInForm form[
            submit backend.AuthenticationApi.signIn
            model(
                username text[
                    min 3
                    max 128]
                password text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
            )
            visible(
                username
                password
            )](
            username text[
                input(
                    model . username
                )
                min 3
                max 128]
            password text[
                input(
                    model . password
                )
                min 6
                max 32
                regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                sensitive]
            submit button{
                on click(
                    call backend.AuthenticationApi.signIn(
                        model . username
                        model . password
                    )
                )}
        )
        signUpForm form[
            submit backend.AuthenticationApi.signUp
            model(
                username text[
                    min 3
                    max 128]
                password text[
                    min 6
                    max 32
                    regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                    sensitive]
            )
            visible(
                username
                password
            )](
            username text[
                input(
                    model . username
                )
                min 3
                max 128]
            password text[
                input(
                    model . password
                )
                min 6
                max 32
                regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$"
                sensitive]
            submit button{
                on click(
                    call backend.AuthenticationApi.signUp(
                        model . username
                        model . password
                    ){
                        on success(
                            goto signInPage
                        )}
                )}
        )
    )
)